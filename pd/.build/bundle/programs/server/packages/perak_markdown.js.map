{"version":3,"sources":["meteor://ðŸ’»app/packages/perak_markdown/packages/perak_markdown.js"],"names":[],"mappingsfile":"/packages/perak_markdown.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/perak:markdown/marked/lib/marked.js                                         //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n/**                                                                                     // 1\n * marked - a markdown parser                                                           // 2\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)                         // 3\n * https://github.com/chjj/marked                                                       // 4\n */                                                                                     // 5\n                                                                                        // 6\n;(function() {                                                                          // 7\n                                                                                        // 8\n/**                                                                                     // 9\n * Block-Level Grammar                                                                  // 10\n */                                                                                     // 11\n                                                                                        // 12\nvar block = {                                                                           // 13\n  newline: /^\\n+/,                                                                      // 14\n  code: /^( {4}[^\\n]+\\n*)+/,                                                            // 15\n  fences: noop,                                                                         // 16\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,                                                      // 17\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,                                     // 18\n  nptable: noop,                                                                        // 19\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,                                        // 20\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,                                     // 21\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,                // 22\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/, // 23\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,             // 24\n  table: noop,                                                                          // 25\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,          // 26\n  text: /^[^\\n]+/                                                                       // 27\n};                                                                                      // 28\n                                                                                        // 29\nblock.bullet = /(?:[*+-]|\\d+\\.)/;                                                       // 30\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;                              // 31\nblock.item = replace(block.item, 'gm')                                                  // 32\n  (/bull/g, block.bullet)                                                               // 33\n  ();                                                                                   // 34\n                                                                                        // 35\nblock.list = replace(block.list)                                                        // 36\n  (/bull/g, block.bullet)                                                               // 37\n  ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')                                       // 38\n  ('def', '\\\\n+(?=' + block.def.source + ')')                                           // 39\n  ();                                                                                   // 40\n                                                                                        // 41\nblock.blockquote = replace(block.blockquote)                                            // 42\n  ('def', block.def)                                                                    // 43\n  ();                                                                                   // 44\n                                                                                        // 45\nblock._tag = '(?!(?:'                                                                   // 46\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'                                // 47\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'                               // 48\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';                          // 49\n                                                                                        // 50\nblock.html = replace(block.html)                                                        // 51\n  ('comment', /<!--[\\s\\S]*?-->/)                                                        // 52\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)                                                    // 53\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)                                      // 54\n  (/tag/g, block._tag)                                                                  // 55\n  ();                                                                                   // 56\n                                                                                        // 57\nblock.paragraph = replace(block.paragraph)                                              // 58\n  ('hr', block.hr)                                                                      // 59\n  ('heading', block.heading)                                                            // 60\n  ('lheading', block.lheading)                                                          // 61\n  ('blockquote', block.blockquote)                                                      // 62\n  ('tag', '<' + block._tag)                                                             // 63\n  ('def', block.def)                                                                    // 64\n  ();                                                                                   // 65\n                                                                                        // 66\n/**                                                                                     // 67\n * Normal Block Grammar                                                                 // 68\n */                                                                                     // 69\n                                                                                        // 70\nblock.normal = merge({}, block);                                                        // 71\n                                                                                        // 72\n/**                                                                                     // 73\n * GFM Block Grammar                                                                    // 74\n */                                                                                     // 75\n                                                                                        // 76\nblock.gfm = merge({}, block.normal, {                                                   // 77\n  fences: /^ *(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n+|$)/,                     // 78\n  paragraph: /^/                                                                        // 79\n});                                                                                     // 80\n                                                                                        // 81\nblock.gfm.paragraph = replace(block.paragraph)                                          // 82\n  ('(?!', '(?!'                                                                         // 83\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'                               // 84\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')                                    // 85\n  ();                                                                                   // 86\n                                                                                        // 87\n/**                                                                                     // 88\n * GFM + Tables Block Grammar                                                           // 89\n */                                                                                     // 90\n                                                                                        // 91\nblock.tables = merge({}, block.gfm, {                                                   // 92\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,             // 93\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/                    // 94\n});                                                                                     // 95\n                                                                                        // 96\n/**                                                                                     // 97\n * Block Lexer                                                                          // 98\n */                                                                                     // 99\n                                                                                        // 100\nfunction Lexer(options) {                                                               // 101\n  this.tokens = [];                                                                     // 102\n  this.tokens.links = {};                                                               // 103\n  this.options = options || marked.defaults;                                            // 104\n  this.rules = block.normal;                                                            // 105\n                                                                                        // 106\n  if (this.options.gfm) {                                                               // 107\n    if (this.options.tables) {                                                          // 108\n      this.rules = block.tables;                                                        // 109\n    } else {                                                                            // 110\n      this.rules = block.gfm;                                                           // 111\n    }                                                                                   // 112\n  }                                                                                     // 113\n}                                                                                       // 114\n                                                                                        // 115\n/**                                                                                     // 116\n * Expose Block Rules                                                                   // 117\n */                                                                                     // 118\n                                                                                        // 119\nLexer.rules = block;                                                                    // 120\n                                                                                        // 121\n/**                                                                                     // 122\n * Static Lex Method                                                                    // 123\n */                                                                                     // 124\n                                                                                        // 125\nLexer.lex = function(src, options) {                                                    // 126\n  var lexer = new Lexer(options);                                                       // 127\n  return lexer.lex(src);                                                                // 128\n};                                                                                      // 129\n                                                                                        // 130\n/**                                                                                     // 131\n * Preprocessing                                                                        // 132\n */                                                                                     // 133\n                                                                                        // 134\nLexer.prototype.lex = function(src) {                                                   // 135\n  src = src                                                                             // 136\n    .replace(/\\r\\n|\\r/g, '\\n')                                                          // 137\n    .replace(/\\t/g, '    ')                                                             // 138\n    .replace(/\\u00a0/g, ' ')                                                            // 139\n    .replace(/\\u2424/g, '\\n');                                                          // 140\n                                                                                        // 141\n  return this.token(src, true);                                                         // 142\n};                                                                                      // 143\n                                                                                        // 144\n/**                                                                                     // 145\n * Lexing                                                                               // 146\n */                                                                                     // 147\n                                                                                        // 148\nLexer.prototype.token = function(src, top, bq) {                                        // 149\n  var src = src.replace(/^ +$/gm, '')                                                   // 150\n    , next                                                                              // 151\n    , loose                                                                             // 152\n    , cap                                                                               // 153\n    , bull                                                                              // 154\n    , b                                                                                 // 155\n    , item                                                                              // 156\n    , space                                                                             // 157\n    , i                                                                                 // 158\n    , l;                                                                                // 159\n                                                                                        // 160\n  while (src) {                                                                         // 161\n    // newline                                                                          // 162\n    if (cap = this.rules.newline.exec(src)) {                                           // 163\n      src = src.substring(cap[0].length);                                               // 164\n      if (cap[0].length > 1) {                                                          // 165\n        this.tokens.push({                                                              // 166\n          type: 'space'                                                                 // 167\n        });                                                                             // 168\n      }                                                                                 // 169\n    }                                                                                   // 170\n                                                                                        // 171\n    // code                                                                             // 172\n    if (cap = this.rules.code.exec(src)) {                                              // 173\n      src = src.substring(cap[0].length);                                               // 174\n      cap = cap[0].replace(/^ {4}/gm, '');                                              // 175\n      this.tokens.push({                                                                // 176\n        type: 'code',                                                                   // 177\n        text: !this.options.pedantic                                                    // 178\n          ? cap.replace(/\\n+$/, '')                                                     // 179\n          : cap                                                                         // 180\n      });                                                                               // 181\n      continue;                                                                         // 182\n    }                                                                                   // 183\n                                                                                        // 184\n    // fences (gfm)                                                                     // 185\n    if (cap = this.rules.fences.exec(src)) {                                            // 186\n      src = src.substring(cap[0].length);                                               // 187\n      this.tokens.push({                                                                // 188\n        type: 'code',                                                                   // 189\n        lang: cap[2],                                                                   // 190\n        text: cap[3]                                                                    // 191\n      });                                                                               // 192\n      continue;                                                                         // 193\n    }                                                                                   // 194\n                                                                                        // 195\n    // heading                                                                          // 196\n    if (cap = this.rules.heading.exec(src)) {                                           // 197\n      src = src.substring(cap[0].length);                                               // 198\n      this.tokens.push({                                                                // 199\n        type: 'heading',                                                                // 200\n        depth: cap[1].length,                                                           // 201\n        text: cap[2]                                                                    // 202\n      });                                                                               // 203\n      continue;                                                                         // 204\n    }                                                                                   // 205\n                                                                                        // 206\n    // table no leading pipe (gfm)                                                      // 207\n    if (top && (cap = this.rules.nptable.exec(src))) {                                  // 208\n      src = src.substring(cap[0].length);                                               // 209\n                                                                                        // 210\n      item = {                                                                          // 211\n        type: 'table',                                                                  // 212\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),                     // 213\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),                        // 214\n        cells: cap[3].replace(/\\n$/, '').split('\\n')                                    // 215\n      };                                                                                // 216\n                                                                                        // 217\n      for (i = 0; i < item.align.length; i++) {                                         // 218\n        if (/^ *-+: *$/.test(item.align[i])) {                                          // 219\n          item.align[i] = 'right';                                                      // 220\n        } else if (/^ *:-+: *$/.test(item.align[i])) {                                  // 221\n          item.align[i] = 'center';                                                     // 222\n        } else if (/^ *:-+ *$/.test(item.align[i])) {                                   // 223\n          item.align[i] = 'left';                                                       // 224\n        } else {                                                                        // 225\n          item.align[i] = null;                                                         // 226\n        }                                                                               // 227\n      }                                                                                 // 228\n                                                                                        // 229\n      for (i = 0; i < item.cells.length; i++) {                                         // 230\n        item.cells[i] = item.cells[i].split(/ *\\| */);                                  // 231\n      }                                                                                 // 232\n                                                                                        // 233\n      this.tokens.push(item);                                                           // 234\n                                                                                        // 235\n      continue;                                                                         // 236\n    }                                                                                   // 237\n                                                                                        // 238\n    // lheading                                                                         // 239\n    if (cap = this.rules.lheading.exec(src)) {                                          // 240\n      src = src.substring(cap[0].length);                                               // 241\n      this.tokens.push({                                                                // 242\n        type: 'heading',                                                                // 243\n        depth: cap[2] === '=' ? 1 : 2,                                                  // 244\n        text: cap[1]                                                                    // 245\n      });                                                                               // 246\n      continue;                                                                         // 247\n    }                                                                                   // 248\n                                                                                        // 249\n    // hr                                                                               // 250\n    if (cap = this.rules.hr.exec(src)) {                                                // 251\n      src = src.substring(cap[0].length);                                               // 252\n      this.tokens.push({                                                                // 253\n        type: 'hr'                                                                      // 254\n      });                                                                               // 255\n      continue;                                                                         // 256\n    }                                                                                   // 257\n                                                                                        // 258\n    // blockquote                                                                       // 259\n    if (cap = this.rules.blockquote.exec(src)) {                                        // 260\n      src = src.substring(cap[0].length);                                               // 261\n                                                                                        // 262\n      this.tokens.push({                                                                // 263\n        type: 'blockquote_start'                                                        // 264\n      });                                                                               // 265\n                                                                                        // 266\n      cap = cap[0].replace(/^ *> ?/gm, '');                                             // 267\n                                                                                        // 268\n      // Pass `top` to keep the current                                                 // 269\n      // \"toplevel\" state. This is exactly                                              // 270\n      // how markdown.pl works.                                                         // 271\n      this.token(cap, top, true);                                                       // 272\n                                                                                        // 273\n      this.tokens.push({                                                                // 274\n        type: 'blockquote_end'                                                          // 275\n      });                                                                               // 276\n                                                                                        // 277\n      continue;                                                                         // 278\n    }                                                                                   // 279\n                                                                                        // 280\n    // list                                                                             // 281\n    if (cap = this.rules.list.exec(src)) {                                              // 282\n      src = src.substring(cap[0].length);                                               // 283\n      bull = cap[2];                                                                    // 284\n                                                                                        // 285\n      this.tokens.push({                                                                // 286\n        type: 'list_start',                                                             // 287\n        ordered: bull.length > 1                                                        // 288\n      });                                                                               // 289\n                                                                                        // 290\n      // Get each top-level item.                                                       // 291\n      cap = cap[0].match(this.rules.item);                                              // 292\n                                                                                        // 293\n      next = false;                                                                     // 294\n      l = cap.length;                                                                   // 295\n      i = 0;                                                                            // 296\n                                                                                        // 297\n      for (; i < l; i++) {                                                              // 298\n        item = cap[i];                                                                  // 299\n                                                                                        // 300\n        // Remove the list item's bullet                                                // 301\n        // so it is seen as the next token.                                             // 302\n        space = item.length;                                                            // 303\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');                                  // 304\n                                                                                        // 305\n        // Outdent whatever the                                                         // 306\n        // list item contains. Hacky.                                                   // 307\n        if (~item.indexOf('\\n ')) {                                                     // 308\n          space -= item.length;                                                         // 309\n          item = !this.options.pedantic                                                 // 310\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')                 // 311\n            : item.replace(/^ {1,4}/gm, '');                                            // 312\n        }                                                                               // 313\n                                                                                        // 314\n        // Determine whether the next list item belongs here.                           // 315\n        // Backpedal if it does not belong in this list.                                // 316\n        if (this.options.smartLists && i !== l - 1) {                                   // 317\n          b = block.bullet.exec(cap[i + 1])[0];                                         // 318\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {                       // 319\n            src = cap.slice(i + 1).join('\\n') + src;                                    // 320\n            i = l - 1;                                                                  // 321\n          }                                                                             // 322\n        }                                                                               // 323\n                                                                                        // 324\n        // Determine whether item is loose or not.                                      // 325\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/                                         // 326\n        // for discount behavior.                                                       // 327\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);                                      // 328\n        if (i !== l - 1) {                                                              // 329\n          next = item.charAt(item.length - 1) === '\\n';                                 // 330\n          if (!loose) loose = next;                                                     // 331\n        }                                                                               // 332\n                                                                                        // 333\n        this.tokens.push({                                                              // 334\n          type: loose                                                                   // 335\n            ? 'loose_item_start'                                                        // 336\n            : 'list_item_start'                                                         // 337\n        });                                                                             // 338\n                                                                                        // 339\n        // Recurse.                                                                     // 340\n        this.token(item, false, bq);                                                    // 341\n                                                                                        // 342\n        this.tokens.push({                                                              // 343\n          type: 'list_item_end'                                                         // 344\n        });                                                                             // 345\n      }                                                                                 // 346\n                                                                                        // 347\n      this.tokens.push({                                                                // 348\n        type: 'list_end'                                                                // 349\n      });                                                                               // 350\n                                                                                        // 351\n      continue;                                                                         // 352\n    }                                                                                   // 353\n                                                                                        // 354\n    // html                                                                             // 355\n    if (cap = this.rules.html.exec(src)) {                                              // 356\n      src = src.substring(cap[0].length);                                               // 357\n      this.tokens.push({                                                                // 358\n        type: this.options.sanitize                                                     // 359\n          ? 'paragraph'                                                                 // 360\n          : 'html',                                                                     // 361\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',             // 362\n        text: cap[0]                                                                    // 363\n      });                                                                               // 364\n      continue;                                                                         // 365\n    }                                                                                   // 366\n                                                                                        // 367\n    // def                                                                              // 368\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {                             // 369\n      src = src.substring(cap[0].length);                                               // 370\n      this.tokens.links[cap[1].toLowerCase()] = {                                       // 371\n        href: cap[2],                                                                   // 372\n        title: cap[3]                                                                   // 373\n      };                                                                                // 374\n      continue;                                                                         // 375\n    }                                                                                   // 376\n                                                                                        // 377\n    // table (gfm)                                                                      // 378\n    if (top && (cap = this.rules.table.exec(src))) {                                    // 379\n      src = src.substring(cap[0].length);                                               // 380\n                                                                                        // 381\n      item = {                                                                          // 382\n        type: 'table',                                                                  // 383\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),                     // 384\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),                        // 385\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')                         // 386\n      };                                                                                // 387\n                                                                                        // 388\n      for (i = 0; i < item.align.length; i++) {                                         // 389\n        if (/^ *-+: *$/.test(item.align[i])) {                                          // 390\n          item.align[i] = 'right';                                                      // 391\n        } else if (/^ *:-+: *$/.test(item.align[i])) {                                  // 392\n          item.align[i] = 'center';                                                     // 393\n        } else if (/^ *:-+ *$/.test(item.align[i])) {                                   // 394\n          item.align[i] = 'left';                                                       // 395\n        } else {                                                                        // 396\n          item.align[i] = null;                                                         // 397\n        }                                                                               // 398\n      }                                                                                 // 399\n                                                                                        // 400\n      for (i = 0; i < item.cells.length; i++) {                                         // 401\n        item.cells[i] = item.cells[i]                                                   // 402\n          .replace(/^ *\\| *| *\\| *$/g, '')                                              // 403\n          .split(/ *\\| */);                                                             // 404\n      }                                                                                 // 405\n                                                                                        // 406\n      this.tokens.push(item);                                                           // 407\n                                                                                        // 408\n      continue;                                                                         // 409\n    }                                                                                   // 410\n                                                                                        // 411\n    // top-level paragraph                                                              // 412\n    if (top && (cap = this.rules.paragraph.exec(src))) {                                // 413\n      src = src.substring(cap[0].length);                                               // 414\n      this.tokens.push({                                                                // 415\n        type: 'paragraph',                                                              // 416\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'                                 // 417\n          ? cap[1].slice(0, -1)                                                         // 418\n          : cap[1]                                                                      // 419\n      });                                                                               // 420\n      continue;                                                                         // 421\n    }                                                                                   // 422\n                                                                                        // 423\n    // text                                                                             // 424\n    if (cap = this.rules.text.exec(src)) {                                              // 425\n      // Top-level should never reach here.                                             // 426\n      src = src.substring(cap[0].length);                                               // 427\n      this.tokens.push({                                                                // 428\n        type: 'text',                                                                   // 429\n        text: cap[0]                                                                    // 430\n      });                                                                               // 431\n      continue;                                                                         // 432\n    }                                                                                   // 433\n                                                                                        // 434\n    if (src) {                                                                          // 435\n      throw new                                                                         // 436\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));                           // 437\n    }                                                                                   // 438\n  }                                                                                     // 439\n                                                                                        // 440\n  return this.tokens;                                                                   // 441\n};                                                                                      // 442\n                                                                                        // 443\n/**                                                                                     // 444\n * Inline-Level Grammar                                                                 // 445\n */                                                                                     // 446\n                                                                                        // 447\nvar inline = {                                                                          // 448\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,                                                // 449\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,                                                 // 450\n  url: noop,                                                                            // 451\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,                        // 452\n  link: /^!?\\[(inside)\\]\\(href\\)/,                                                      // 453\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,                                            // 454\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,                                           // 455\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,                             // 456\n  em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,                        // 457\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,                                             // 458\n  br: /^ {2,}\\n(?!\\s*$)/,                                                               // 459\n  del: noop,                                                                            // 460\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/                                            // 461\n};                                                                                      // 462\n                                                                                        // 463\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;                              // 464\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;                        // 465\n                                                                                        // 466\ninline.link = replace(inline.link)                                                      // 467\n  ('inside', inline._inside)                                                            // 468\n  ('href', inline._href)                                                                // 469\n  ();                                                                                   // 470\n                                                                                        // 471\ninline.reflink = replace(inline.reflink)                                                // 472\n  ('inside', inline._inside)                                                            // 473\n  ();                                                                                   // 474\n                                                                                        // 475\n/**                                                                                     // 476\n * Normal Inline Grammar                                                                // 477\n */                                                                                     // 478\n                                                                                        // 479\ninline.normal = merge({}, inline);                                                      // 480\n                                                                                        // 481\n/**                                                                                     // 482\n * Pedantic Inline Grammar                                                              // 483\n */                                                                                     // 484\n                                                                                        // 485\ninline.pedantic = merge({}, inline.normal, {                                            // 486\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,             // 487\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/                        // 488\n});                                                                                     // 489\n                                                                                        // 490\n/**                                                                                     // 491\n * GFM Inline Grammar                                                                   // 492\n */                                                                                     // 493\n                                                                                        // 494\ninline.gfm = merge({}, inline.normal, {                                                 // 495\n  escape: replace(inline.escape)('])', '~|])')(),                                       // 496\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,                                          // 497\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,                                                       // 498\n  text: replace(inline.text)                                                            // 499\n    (']|', '~]|')                                                                       // 500\n    ('|', '|https?://|')                                                                // 501\n    ()                                                                                  // 502\n});                                                                                     // 503\n                                                                                        // 504\n/**                                                                                     // 505\n * GFM + Line Breaks Inline Grammar                                                     // 506\n */                                                                                     // 507\n                                                                                        // 508\ninline.breaks = merge({}, inline.gfm, {                                                 // 509\n  br: replace(inline.br)('{2,}', '*')(),                                                // 510\n  text: replace(inline.gfm.text)('{2,}', '*')()                                         // 511\n});                                                                                     // 512\n                                                                                        // 513\n/**                                                                                     // 514\n * Inline Lexer & Compiler                                                              // 515\n */                                                                                     // 516\n                                                                                        // 517\nfunction InlineLexer(links, options) {                                                  // 518\n  this.options = options || marked.defaults;                                            // 519\n  this.links = links;                                                                   // 520\n  this.rules = inline.normal;                                                           // 521\n  this.renderer = this.options.renderer || new Renderer;                                // 522\n  this.renderer.options = this.options;                                                 // 523\n                                                                                        // 524\n  if (!this.links) {                                                                    // 525\n    throw new                                                                           // 526\n      Error('Tokens array requires a `links` property.');                               // 527\n  }                                                                                     // 528\n                                                                                        // 529\n  if (this.options.gfm) {                                                               // 530\n    if (this.options.breaks) {                                                          // 531\n      this.rules = inline.breaks;                                                       // 532\n    } else {                                                                            // 533\n      this.rules = inline.gfm;                                                          // 534\n    }                                                                                   // 535\n  } else if (this.options.pedantic) {                                                   // 536\n    this.rules = inline.pedantic;                                                       // 537\n  }                                                                                     // 538\n}                                                                                       // 539\n                                                                                        // 540\n/**                                                                                     // 541\n * Expose Inline Rules                                                                  // 542\n */                                                                                     // 543\n                                                                                        // 544\nInlineLexer.rules = inline;                                                             // 545\n                                                                                        // 546\n/**                                                                                     // 547\n * Static Lexing/Compiling Method                                                       // 548\n */                                                                                     // 549\n                                                                                        // 550\nInlineLexer.output = function(src, links, options) {                                    // 551\n  var inline = new InlineLexer(links, options);                                         // 552\n  return inline.output(src);                                                            // 553\n};                                                                                      // 554\n                                                                                        // 555\n/**                                                                                     // 556\n * Lexing/Compiling                                                                     // 557\n */                                                                                     // 558\n                                                                                        // 559\nInlineLexer.prototype.output = function(src) {                                          // 560\n  var out = ''                                                                          // 561\n    , link                                                                              // 562\n    , text                                                                              // 563\n    , href                                                                              // 564\n    , cap;                                                                              // 565\n                                                                                        // 566\n  while (src) {                                                                         // 567\n    // escape                                                                           // 568\n    if (cap = this.rules.escape.exec(src)) {                                            // 569\n      src = src.substring(cap[0].length);                                               // 570\n      out += cap[1];                                                                    // 571\n      continue;                                                                         // 572\n    }                                                                                   // 573\n                                                                                        // 574\n    // autolink                                                                         // 575\n    if (cap = this.rules.autolink.exec(src)) {                                          // 576\n      src = src.substring(cap[0].length);                                               // 577\n      if (cap[2] === '@') {                                                             // 578\n        text = cap[1].charAt(6) === ':'                                                 // 579\n          ? this.mangle(cap[1].substring(7))                                            // 580\n          : this.mangle(cap[1]);                                                        // 581\n        href = this.mangle('mailto:') + text;                                           // 582\n      } else {                                                                          // 583\n        text = escape(cap[1]);                                                          // 584\n        href = text;                                                                    // 585\n      }                                                                                 // 586\n      out += this.renderer.link(href, null, text);                                      // 587\n      continue;                                                                         // 588\n    }                                                                                   // 589\n                                                                                        // 590\n    // url (gfm)                                                                        // 591\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {                             // 592\n      src = src.substring(cap[0].length);                                               // 593\n      text = escape(cap[1]);                                                            // 594\n      href = text;                                                                      // 595\n      out += this.renderer.link(href, null, text);                                      // 596\n      continue;                                                                         // 597\n    }                                                                                   // 598\n                                                                                        // 599\n    // tag                                                                              // 600\n    if (cap = this.rules.tag.exec(src)) {                                               // 601\n      if (!this.inLink && /^<a /i.test(cap[0])) {                                       // 602\n        this.inLink = true;                                                             // 603\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {                               // 604\n        this.inLink = false;                                                            // 605\n      }                                                                                 // 606\n      src = src.substring(cap[0].length);                                               // 607\n      out += this.options.sanitize                                                      // 608\n        ? escape(cap[0])                                                                // 609\n        : cap[0];                                                                       // 610\n      continue;                                                                         // 611\n    }                                                                                   // 612\n                                                                                        // 613\n    // link                                                                             // 614\n    if (cap = this.rules.link.exec(src)) {                                              // 615\n      src = src.substring(cap[0].length);                                               // 616\n      this.inLink = true;                                                               // 617\n      out += this.outputLink(cap, {                                                     // 618\n        href: cap[2],                                                                   // 619\n        title: cap[3]                                                                   // 620\n      });                                                                               // 621\n      this.inLink = false;                                                              // 622\n      continue;                                                                         // 623\n    }                                                                                   // 624\n                                                                                        // 625\n    // reflink, nolink                                                                  // 626\n    if ((cap = this.rules.reflink.exec(src))                                            // 627\n        || (cap = this.rules.nolink.exec(src))) {                                       // 628\n      src = src.substring(cap[0].length);                                               // 629\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');                                   // 630\n      link = this.links[link.toLowerCase()];                                            // 631\n      if (!link || !link.href) {                                                        // 632\n        out += cap[0].charAt(0);                                                        // 633\n        src = cap[0].substring(1) + src;                                                // 634\n        continue;                                                                       // 635\n      }                                                                                 // 636\n      this.inLink = true;                                                               // 637\n      out += this.outputLink(cap, link);                                                // 638\n      this.inLink = false;                                                              // 639\n      continue;                                                                         // 640\n    }                                                                                   // 641\n                                                                                        // 642\n    // strong                                                                           // 643\n    if (cap = this.rules.strong.exec(src)) {                                            // 644\n      src = src.substring(cap[0].length);                                               // 645\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));                       // 646\n      continue;                                                                         // 647\n    }                                                                                   // 648\n                                                                                        // 649\n    // em                                                                               // 650\n    if (cap = this.rules.em.exec(src)) {                                                // 651\n      src = src.substring(cap[0].length);                                               // 652\n      out += this.renderer.em(this.output(cap[2] || cap[1]));                           // 653\n      continue;                                                                         // 654\n    }                                                                                   // 655\n                                                                                        // 656\n    // code                                                                             // 657\n    if (cap = this.rules.code.exec(src)) {                                              // 658\n      src = src.substring(cap[0].length);                                               // 659\n      out += this.renderer.codespan(escape(cap[2], true));                              // 660\n      continue;                                                                         // 661\n    }                                                                                   // 662\n                                                                                        // 663\n    // br                                                                               // 664\n    if (cap = this.rules.br.exec(src)) {                                                // 665\n      src = src.substring(cap[0].length);                                               // 666\n      out += this.renderer.br();                                                        // 667\n      continue;                                                                         // 668\n    }                                                                                   // 669\n                                                                                        // 670\n    // del (gfm)                                                                        // 671\n    if (cap = this.rules.del.exec(src)) {                                               // 672\n      src = src.substring(cap[0].length);                                               // 673\n      out += this.renderer.del(this.output(cap[1]));                                    // 674\n      continue;                                                                         // 675\n    }                                                                                   // 676\n                                                                                        // 677\n    // text                                                                             // 678\n    if (cap = this.rules.text.exec(src)) {                                              // 679\n      src = src.substring(cap[0].length);                                               // 680\n      out += escape(this.smartypants(cap[0]));                                          // 681\n      continue;                                                                         // 682\n    }                                                                                   // 683\n                                                                                        // 684\n    if (src) {                                                                          // 685\n      throw new                                                                         // 686\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));                           // 687\n    }                                                                                   // 688\n  }                                                                                     // 689\n                                                                                        // 690\n  return out;                                                                           // 691\n};                                                                                      // 692\n                                                                                        // 693\n/**                                                                                     // 694\n * Compile Link                                                                         // 695\n */                                                                                     // 696\n                                                                                        // 697\nInlineLexer.prototype.outputLink = function(cap, link) {                                // 698\n  var href = escape(link.href)                                                          // 699\n    , title = link.title ? escape(link.title) : null;                                   // 700\n                                                                                        // 701\n  return cap[0].charAt(0) !== '!'                                                       // 702\n    ? this.renderer.link(href, title, this.output(cap[1]))                              // 703\n    : this.renderer.image(href, title, escape(cap[1]));                                 // 704\n};                                                                                      // 705\n                                                                                        // 706\n/**                                                                                     // 707\n * Smartypants Transformations                                                          // 708\n */                                                                                     // 709\n                                                                                        // 710\nInlineLexer.prototype.smartypants = function(text) {                                    // 711\n  if (!this.options.smartypants) return text;                                           // 712\n  return text                                                                           // 713\n    // em-dashes                                                                        // 714\n    .replace(/--/g, '\\u2014')                                                           // 715\n    // opening singles                                                                  // 716\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')                                     // 717\n    // closing singles & apostrophes                                                    // 718\n    .replace(/'/g, '\\u2019')                                                            // 719\n    // opening doubles                                                                  // 720\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')                                // 721\n    // closing doubles                                                                  // 722\n    .replace(/\"/g, '\\u201d')                                                            // 723\n    // ellipses                                                                         // 724\n    .replace(/\\.{3}/g, '\\u2026');                                                       // 725\n};                                                                                      // 726\n                                                                                        // 727\n/**                                                                                     // 728\n * Mangle Links                                                                         // 729\n */                                                                                     // 730\n                                                                                        // 731\nInlineLexer.prototype.mangle = function(text) {                                         // 732\n  var out = ''                                                                          // 733\n    , l = text.length                                                                   // 734\n    , i = 0                                                                             // 735\n    , ch;                                                                               // 736\n                                                                                        // 737\n  for (; i < l; i++) {                                                                  // 738\n    ch = text.charCodeAt(i);                                                            // 739\n    if (Math.random() > 0.5) {                                                          // 740\n      ch = 'x' + ch.toString(16);                                                       // 741\n    }                                                                                   // 742\n    out += '&#' + ch + ';';                                                             // 743\n  }                                                                                     // 744\n                                                                                        // 745\n  return out;                                                                           // 746\n};                                                                                      // 747\n                                                                                        // 748\n/**                                                                                     // 749\n * Renderer                                                                             // 750\n */                                                                                     // 751\n                                                                                        // 752\nfunction Renderer(options) {                                                            // 753\n  this.options = options || {};                                                         // 754\n}                                                                                       // 755\n                                                                                        // 756\nRenderer.prototype.code = function(code, lang, escaped) {                               // 757\n  if (this.options.highlight) {                                                         // 758\n    var out = this.options.highlight(code, lang);                                       // 759\n    if (out != null && out !== code) {                                                  // 760\n      escaped = true;                                                                   // 761\n      code = out;                                                                       // 762\n    }                                                                                   // 763\n  }                                                                                     // 764\n                                                                                        // 765\n  if (!lang) {                                                                          // 766\n    return '<pre><code>'                                                                // 767\n      + (escaped ? code : escape(code, true))                                           // 768\n      + '\\n</code></pre>';                                                              // 769\n  }                                                                                     // 770\n                                                                                        // 771\n  return '<pre><code class=\"'                                                           // 772\n    + this.options.langPrefix                                                           // 773\n    + escape(lang, true)                                                                // 774\n    + '\">'                                                                              // 775\n    + (escaped ? code : escape(code, true))                                             // 776\n    + '\\n</code></pre>\\n';                                                              // 777\n};                                                                                      // 778\n                                                                                        // 779\nRenderer.prototype.blockquote = function(quote) {                                       // 780\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';                                  // 781\n};                                                                                      // 782\n                                                                                        // 783\nRenderer.prototype.html = function(html) {                                              // 784\n  return html;                                                                          // 785\n};                                                                                      // 786\n                                                                                        // 787\nRenderer.prototype.heading = function(text, level, raw) {                               // 788\n  return '<h'                                                                           // 789\n    + level                                                                             // 790\n    + ' id=\"'                                                                           // 791\n    + this.options.headerPrefix                                                         // 792\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')                                         // 793\n    + '\">'                                                                              // 794\n    + text                                                                              // 795\n    + '</h'                                                                             // 796\n    + level                                                                             // 797\n    + '>\\n';                                                                            // 798\n};                                                                                      // 799\n                                                                                        // 800\nRenderer.prototype.hr = function() {                                                    // 801\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';                                     // 802\n};                                                                                      // 803\n                                                                                        // 804\nRenderer.prototype.list = function(body, ordered) {                                     // 805\n  var type = ordered ? 'ol' : 'ul';                                                     // 806\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';                               // 807\n};                                                                                      // 808\n                                                                                        // 809\nRenderer.prototype.listitem = function(text) {                                          // 810\n  return '<li>' + text + '</li>\\n';                                                     // 811\n};                                                                                      // 812\n                                                                                        // 813\nRenderer.prototype.paragraph = function(text) {                                         // 814\n  return '<p>' + text + '</p>\\n';                                                       // 815\n};                                                                                      // 816\n                                                                                        // 817\nRenderer.prototype.table = function(header, body) {                                     // 818\n  return '<table>\\n'                                                                    // 819\n    + '<thead>\\n'                                                                       // 820\n    + header                                                                            // 821\n    + '</thead>\\n'                                                                      // 822\n    + '<tbody>\\n'                                                                       // 823\n    + body                                                                              // 824\n    + '</tbody>\\n'                                                                      // 825\n    + '</table>\\n';                                                                     // 826\n};                                                                                      // 827\n                                                                                        // 828\nRenderer.prototype.tablerow = function(content) {                                       // 829\n  return '<tr>\\n' + content + '</tr>\\n';                                                // 830\n};                                                                                      // 831\n                                                                                        // 832\nRenderer.prototype.tablecell = function(content, flags) {                               // 833\n  var type = flags.header ? 'th' : 'td';                                                // 834\n  var tag = flags.align                                                                 // 835\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'                           // 836\n    : '<' + type + '>';                                                                 // 837\n  return tag + content + '</' + type + '>\\n';                                           // 838\n};                                                                                      // 839\n                                                                                        // 840\n// span level renderer                                                                  // 841\nRenderer.prototype.strong = function(text) {                                            // 842\n  return '<strong>' + text + '</strong>';                                               // 843\n};                                                                                      // 844\n                                                                                        // 845\nRenderer.prototype.em = function(text) {                                                // 846\n  return '<em>' + text + '</em>';                                                       // 847\n};                                                                                      // 848\n                                                                                        // 849\nRenderer.prototype.codespan = function(text) {                                          // 850\n  return '<code>' + text + '</code>';                                                   // 851\n};                                                                                      // 852\n                                                                                        // 853\nRenderer.prototype.br = function() {                                                    // 854\n  return this.options.xhtml ? '<br/>' : '<br>';                                         // 855\n};                                                                                      // 856\n                                                                                        // 857\nRenderer.prototype.del = function(text) {                                               // 858\n  return '<del>' + text + '</del>';                                                     // 859\n};                                                                                      // 860\n                                                                                        // 861\nRenderer.prototype.link = function(href, title, text) {                                 // 862\n  if (this.options.sanitize) {                                                          // 863\n    try {                                                                               // 864\n      var prot = decodeURIComponent(unescape(href))                                     // 865\n        .replace(/[^\\w:]/g, '')                                                         // 866\n        .toLowerCase();                                                                 // 867\n    } catch (e) {                                                                       // 868\n      return '';                                                                        // 869\n    }                                                                                   // 870\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {         // 871\n      return '';                                                                        // 872\n    }                                                                                   // 873\n  }                                                                                     // 874\n  var out = '<a href=\"' + href + '\"';                                                   // 875\n  if (title) {                                                                          // 876\n    out += ' title=\"' + title + '\"';                                                    // 877\n  }                                                                                     // 878\n  out += '>' + text + '</a>';                                                           // 879\n  return out;                                                                           // 880\n};                                                                                      // 881\n                                                                                        // 882\nRenderer.prototype.image = function(href, title, text) {                                // 883\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';                               // 884\n  if (title) {                                                                          // 885\n    out += ' title=\"' + title + '\"';                                                    // 886\n  }                                                                                     // 887\n  out += this.options.xhtml ? '/>' : '>';                                               // 888\n  return out;                                                                           // 889\n};                                                                                      // 890\n                                                                                        // 891\n/**                                                                                     // 892\n * Parsing & Compiling                                                                  // 893\n */                                                                                     // 894\n                                                                                        // 895\nfunction Parser(options) {                                                              // 896\n  this.tokens = [];                                                                     // 897\n  this.token = null;                                                                    // 898\n  this.options = options || marked.defaults;                                            // 899\n  this.options.renderer = this.options.renderer || new Renderer;                        // 900\n  this.renderer = this.options.renderer;                                                // 901\n  this.renderer.options = this.options;                                                 // 902\n}                                                                                       // 903\n                                                                                        // 904\n/**                                                                                     // 905\n * Static Parse Method                                                                  // 906\n */                                                                                     // 907\n                                                                                        // 908\nParser.parse = function(src, options, renderer) {                                       // 909\n  var parser = new Parser(options, renderer);                                           // 910\n  return parser.parse(src);                                                             // 911\n};                                                                                      // 912\n                                                                                        // 913\n/**                                                                                     // 914\n * Parse Loop                                                                           // 915\n */                                                                                     // 916\n                                                                                        // 917\nParser.prototype.parse = function(src) {                                                // 918\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);                // 919\n  this.tokens = src.reverse();                                                          // 920\n                                                                                        // 921\n  var out = '';                                                                         // 922\n  while (this.next()) {                                                                 // 923\n    out += this.tok();                                                                  // 924\n  }                                                                                     // 925\n                                                                                        // 926\n  return out;                                                                           // 927\n};                                                                                      // 928\n                                                                                        // 929\n/**                                                                                     // 930\n * Next Token                                                                           // 931\n */                                                                                     // 932\n                                                                                        // 933\nParser.prototype.next = function() {                                                    // 934\n  return this.token = this.tokens.pop();                                                // 935\n};                                                                                      // 936\n                                                                                        // 937\n/**                                                                                     // 938\n * Preview Next Token                                                                   // 939\n */                                                                                     // 940\n                                                                                        // 941\nParser.prototype.peek = function() {                                                    // 942\n  return this.tokens[this.tokens.length - 1] || 0;                                      // 943\n};                                                                                      // 944\n                                                                                        // 945\n/**                                                                                     // 946\n * Parse Text Tokens                                                                    // 947\n */                                                                                     // 948\n                                                                                        // 949\nParser.prototype.parseText = function() {                                               // 950\n  var body = this.token.text;                                                           // 951\n                                                                                        // 952\n  while (this.peek().type === 'text') {                                                 // 953\n    body += '\\n' + this.next().text;                                                    // 954\n  }                                                                                     // 955\n                                                                                        // 956\n  return this.inline.output(body);                                                      // 957\n};                                                                                      // 958\n                                                                                        // 959\n/**                                                                                     // 960\n * Parse Current Token                                                                  // 961\n */                                                                                     // 962\n                                                                                        // 963\nParser.prototype.tok = function() {                                                     // 964\n  switch (this.token.type) {                                                            // 965\n    case 'space': {                                                                     // 966\n      return '';                                                                        // 967\n    }                                                                                   // 968\n    case 'hr': {                                                                        // 969\n      return this.renderer.hr();                                                        // 970\n    }                                                                                   // 971\n    case 'heading': {                                                                   // 972\n      return this.renderer.heading(                                                     // 973\n        this.inline.output(this.token.text),                                            // 974\n        this.token.depth,                                                               // 975\n        this.token.text);                                                               // 976\n    }                                                                                   // 977\n    case 'code': {                                                                      // 978\n      return this.renderer.code(this.token.text,                                        // 979\n        this.token.lang,                                                                // 980\n        this.token.escaped);                                                            // 981\n    }                                                                                   // 982\n    case 'table': {                                                                     // 983\n      var header = ''                                                                   // 984\n        , body = ''                                                                     // 985\n        , i                                                                             // 986\n        , row                                                                           // 987\n        , cell                                                                          // 988\n        , flags                                                                         // 989\n        , j;                                                                            // 990\n                                                                                        // 991\n      // header                                                                         // 992\n      cell = '';                                                                        // 993\n      for (i = 0; i < this.token.header.length; i++) {                                  // 994\n        flags = { header: true, align: this.token.align[i] };                           // 995\n        cell += this.renderer.tablecell(                                                // 996\n          this.inline.output(this.token.header[i]),                                     // 997\n          { header: true, align: this.token.align[i] }                                  // 998\n        );                                                                              // 999\n      }                                                                                 // 1000\n      header += this.renderer.tablerow(cell);                                           // 1001\n                                                                                        // 1002\n      for (i = 0; i < this.token.cells.length; i++) {                                   // 1003\n        row = this.token.cells[i];                                                      // 1004\n                                                                                        // 1005\n        cell = '';                                                                      // 1006\n        for (j = 0; j < row.length; j++) {                                              // 1007\n          cell += this.renderer.tablecell(                                              // 1008\n            this.inline.output(row[j]),                                                 // 1009\n            { header: false, align: this.token.align[j] }                               // 1010\n          );                                                                            // 1011\n        }                                                                               // 1012\n                                                                                        // 1013\n        body += this.renderer.tablerow(cell);                                           // 1014\n      }                                                                                 // 1015\n      return this.renderer.table(header, body);                                         // 1016\n    }                                                                                   // 1017\n    case 'blockquote_start': {                                                          // 1018\n      var body = '';                                                                    // 1019\n                                                                                        // 1020\n      while (this.next().type !== 'blockquote_end') {                                   // 1021\n        body += this.tok();                                                             // 1022\n      }                                                                                 // 1023\n                                                                                        // 1024\n      return this.renderer.blockquote(body);                                            // 1025\n    }                                                                                   // 1026\n    case 'list_start': {                                                                // 1027\n      var body = ''                                                                     // 1028\n        , ordered = this.token.ordered;                                                 // 1029\n                                                                                        // 1030\n      while (this.next().type !== 'list_end') {                                         // 1031\n        body += this.tok();                                                             // 1032\n      }                                                                                 // 1033\n                                                                                        // 1034\n      return this.renderer.list(body, ordered);                                         // 1035\n    }                                                                                   // 1036\n    case 'list_item_start': {                                                           // 1037\n      var body = '';                                                                    // 1038\n                                                                                        // 1039\n      while (this.next().type !== 'list_item_end') {                                    // 1040\n        body += this.token.type === 'text'                                              // 1041\n          ? this.parseText()                                                            // 1042\n          : this.tok();                                                                 // 1043\n      }                                                                                 // 1044\n                                                                                        // 1045\n      return this.renderer.listitem(body);                                              // 1046\n    }                                                                                   // 1047\n    case 'loose_item_start': {                                                          // 1048\n      var body = '';                                                                    // 1049\n                                                                                        // 1050\n      while (this.next().type !== 'list_item_end') {                                    // 1051\n        body += this.tok();                                                             // 1052\n      }                                                                                 // 1053\n                                                                                        // 1054\n      return this.renderer.listitem(body);                                              // 1055\n    }                                                                                   // 1056\n    case 'html': {                                                                      // 1057\n      var html = !this.token.pre && !this.options.pedantic                              // 1058\n        ? this.inline.output(this.token.text)                                           // 1059\n        : this.token.text;                                                              // 1060\n      return this.renderer.html(html);                                                  // 1061\n    }                                                                                   // 1062\n    case 'paragraph': {                                                                 // 1063\n      return this.renderer.paragraph(this.inline.output(this.token.text));              // 1064\n    }                                                                                   // 1065\n    case 'text': {                                                                      // 1066\n      return this.renderer.paragraph(this.parseText());                                 // 1067\n    }                                                                                   // 1068\n  }                                                                                     // 1069\n};                                                                                      // 1070\n                                                                                        // 1071\n/**                                                                                     // 1072\n * Helpers                                                                              // 1073\n */                                                                                     // 1074\n                                                                                        // 1075\nfunction escape(html, encode) {                                                         // 1076\n  return html                                                                           // 1077\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')                                  // 1078\n    .replace(/</g, '&lt;')                                                              // 1079\n    .replace(/>/g, '&gt;')                                                              // 1080\n    .replace(/\"/g, '&quot;')                                                            // 1081\n    .replace(/'/g, '&#39;');                                                            // 1082\n}                                                                                       // 1083\n                                                                                        // 1084\nfunction unescape(html) {                                                               // 1085\n  return html.replace(/&([#\\w]+);/g, function(_, n) {                                   // 1086\n    n = n.toLowerCase();                                                                // 1087\n    if (n === 'colon') return ':';                                                      // 1088\n    if (n.charAt(0) === '#') {                                                          // 1089\n      return n.charAt(1) === 'x'                                                        // 1090\n        ? String.fromCharCode(parseInt(n.substring(2), 16))                             // 1091\n        : String.fromCharCode(+n.substring(1));                                         // 1092\n    }                                                                                   // 1093\n    return '';                                                                          // 1094\n  });                                                                                   // 1095\n}                                                                                       // 1096\n                                                                                        // 1097\nfunction replace(regex, opt) {                                                          // 1098\n  regex = regex.source;                                                                 // 1099\n  opt = opt || '';                                                                      // 1100\n  return function self(name, val) {                                                     // 1101\n    if (!name) return new RegExp(regex, opt);                                           // 1102\n    val = val.source || val;                                                            // 1103\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');                                            // 1104\n    regex = regex.replace(name, val);                                                   // 1105\n    return self;                                                                        // 1106\n  };                                                                                    // 1107\n}                                                                                       // 1108\n                                                                                        // 1109\nfunction noop() {}                                                                      // 1110\nnoop.exec = noop;                                                                       // 1111\n                                                                                        // 1112\nfunction merge(obj) {                                                                   // 1113\n  var i = 1                                                                             // 1114\n    , target                                                                            // 1115\n    , key;                                                                              // 1116\n                                                                                        // 1117\n  for (; i < arguments.length; i++) {                                                   // 1118\n    target = arguments[i];                                                              // 1119\n    for (key in target) {                                                               // 1120\n      if (Object.prototype.hasOwnProperty.call(target, key)) {                          // 1121\n        obj[key] = target[key];                                                         // 1122\n      }                                                                                 // 1123\n    }                                                                                   // 1124\n  }                                                                                     // 1125\n                                                                                        // 1126\n  return obj;                                                                           // 1127\n}                                                                                       // 1128\n                                                                                        // 1129\n                                                                                        // 1130\n/**                                                                                     // 1131\n * Marked                                                                               // 1132\n */                                                                                     // 1133\n                                                                                        // 1134\nfunction marked(src, opt, callback) {                                                   // 1135\n  if (callback || typeof opt === 'function') {                                          // 1136\n    if (!callback) {                                                                    // 1137\n      callback = opt;                                                                   // 1138\n      opt = null;                                                                       // 1139\n    }                                                                                   // 1140\n                                                                                        // 1141\n    opt = merge({}, marked.defaults, opt || {});                                        // 1142\n                                                                                        // 1143\n    var highlight = opt.highlight                                                       // 1144\n      , tokens                                                                          // 1145\n      , pending                                                                         // 1146\n      , i = 0;                                                                          // 1147\n                                                                                        // 1148\n    try {                                                                               // 1149\n      tokens = Lexer.lex(src, opt)                                                      // 1150\n    } catch (e) {                                                                       // 1151\n      return callback(e);                                                               // 1152\n    }                                                                                   // 1153\n                                                                                        // 1154\n    pending = tokens.length;                                                            // 1155\n                                                                                        // 1156\n    var done = function(err) {                                                          // 1157\n      if (err) {                                                                        // 1158\n        opt.highlight = highlight;                                                      // 1159\n        return callback(err);                                                           // 1160\n      }                                                                                 // 1161\n                                                                                        // 1162\n      var out;                                                                          // 1163\n                                                                                        // 1164\n      try {                                                                             // 1165\n        out = Parser.parse(tokens, opt);                                                // 1166\n      } catch (e) {                                                                     // 1167\n        err = e;                                                                        // 1168\n      }                                                                                 // 1169\n                                                                                        // 1170\n      opt.highlight = highlight;                                                        // 1171\n                                                                                        // 1172\n      return err                                                                        // 1173\n        ? callback(err)                                                                 // 1174\n        : callback(null, out);                                                          // 1175\n    };                                                                                  // 1176\n                                                                                        // 1177\n    if (!highlight || highlight.length < 3) {                                           // 1178\n      return done();                                                                    // 1179\n    }                                                                                   // 1180\n                                                                                        // 1181\n    delete opt.highlight;                                                               // 1182\n                                                                                        // 1183\n    if (!pending) return done();                                                        // 1184\n                                                                                        // 1185\n    for (; i < tokens.length; i++) {                                                    // 1186\n      (function(token) {                                                                // 1187\n        if (token.type !== 'code') {                                                    // 1188\n          return --pending || done();                                                   // 1189\n        }                                                                               // 1190\n        return highlight(token.text, token.lang, function(err, code) {                  // 1191\n          if (err) return done(err);                                                    // 1192\n          if (code == null || code === token.text) {                                    // 1193\n            return --pending || done();                                                 // 1194\n          }                                                                             // 1195\n          token.text = code;                                                            // 1196\n          token.escaped = true;                                                         // 1197\n          --pending || done();                                                          // 1198\n        });                                                                             // 1199\n      })(tokens[i]);                                                                    // 1200\n    }                                                                                   // 1201\n                                                                                        // 1202\n    return;                                                                             // 1203\n  }                                                                                     // 1204\n  try {                                                                                 // 1205\n    if (opt) opt = merge({}, marked.defaults, opt);                                     // 1206\n    return Parser.parse(Lexer.lex(src, opt), opt);                                      // 1207\n  } catch (e) {                                                                         // 1208\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';             // 1209\n    if ((opt || marked.defaults).silent) {                                              // 1210\n      return '<p>An error occured:</p><pre>'                                            // 1211\n        + escape(e.message + '', true)                                                  // 1212\n        + '</pre>';                                                                     // 1213\n    }                                                                                   // 1214\n    throw e;                                                                            // 1215\n  }                                                                                     // 1216\n}                                                                                       // 1217\n                                                                                        // 1218\n/**                                                                                     // 1219\n * Options                                                                              // 1220\n */                                                                                     // 1221\n                                                                                        // 1222\nmarked.options =                                                                        // 1223\nmarked.setOptions = function(opt) {                                                     // 1224\n  merge(marked.defaults, opt);                                                          // 1225\n  return marked;                                                                        // 1226\n};                                                                                      // 1227\n                                                                                        // 1228\nmarked.defaults = {                                                                     // 1229\n  gfm: true,                                                                            // 1230\n  tables: true,                                                                         // 1231\n  breaks: false,                                                                        // 1232\n  pedantic: false,                                                                      // 1233\n  sanitize: false,                                                                      // 1234\n  smartLists: false,                                                                    // 1235\n  silent: false,                                                                        // 1236\n  highlight: null,                                                                      // 1237\n  langPrefix: 'lang-',                                                                  // 1238\n  smartypants: false,                                                                   // 1239\n  headerPrefix: '',                                                                     // 1240\n  renderer: new Renderer,                                                               // 1241\n  xhtml: false                                                                          // 1242\n};                                                                                      // 1243\n                                                                                        // 1244\n/**                                                                                     // 1245\n * Expose                                                                               // 1246\n */                                                                                     // 1247\n                                                                                        // 1248\nmarked.Parser = Parser;                                                                 // 1249\nmarked.parser = Parser.parse;                                                           // 1250\n                                                                                        // 1251\nmarked.Renderer = Renderer;                                                             // 1252\n                                                                                        // 1253\nmarked.Lexer = Lexer;                                                                   // 1254\nmarked.lexer = Lexer.lex;                                                               // 1255\n                                                                                        // 1256\nmarked.InlineLexer = InlineLexer;                                                       // 1257\nmarked.inlineLexer = InlineLexer.output;                                                // 1258\n                                                                                        // 1259\nmarked.parse = marked;                                                                  // 1260\n                                                                                        // 1261\nif (typeof module !== 'undefined' && typeof exports === 'object') {                     // 1262\n  module.exports = marked;                                                              // 1263\n} else if (typeof define === 'function' && define.amd) {                                // 1264\n  define(function() { return marked; });                                                // 1265\n} else {                                                                                // 1266\n  this.marked = marked;                                                                 // 1267\n}                                                                                       // 1268\n                                                                                        // 1269\n}).call(function() {                                                                    // 1270\n  return this || (typeof window !== 'undefined' ? window : global);                     // 1271\n}());                                                                                   // 1272\n                                                                                        // 1273\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/perak:markdown/markdown.js                                                  //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\nvar mark = marked;                                                                      // 1\n                                                                                        // 2\nmark.setOptions({                                                                       // 3\n  gfm: true,                                                                            // 4\n  tables: true,                                                                         // 5\n  breaks: true                                                                          // 6\n});                                                                                     // 7\n                                                                                        // 8\nMarkdown = mark;                                                                        // 9\n                                                                                        // 10\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}