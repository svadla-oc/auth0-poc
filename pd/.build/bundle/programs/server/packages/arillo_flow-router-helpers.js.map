{"version":3,"sources":["meteor://ðŸ’»app/packages/arillo_flow-router-helpers/client/helpers.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;EAAA;;;AAAA,YAAY;AACV;EADW;EACX,IAAiC,IAAI,CAAC,MAAL,KAAe,CAAhD;AAAA,WAAO,UAAU,CAAC,SAAX,GAAP;;EACA,OAAO,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,IAAI,CAAC,MAAL,GAAc,CAA5B;SACP,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,SAAC,IAAD,EAAO,GAAP;WACb,QAAS,UAAU,CAAC,SAAX,CAAqB,GAArB;EADI,CAAf,EAEE,IAFF;AAHU;;AAQZ,UAAU,SAAC,IAAD,EAAO,IAAP;AACR;;IADe,OAAO;MAAC,MAAK,EAAN;;;EACtB,KAA0C,IAA1C;AAAA,UAAU,UAAM,iBAAN,EAAV;;EAEA,KAAyB,IAAI,CAAC,IAA9B;IAAA,OAAO;MAAA,MAAM,IAAN;MAAP;;EACA,IAAG,wDAAH;IACE,OAAO;IACP,OAAO,IAAI,CAAC,IAAI,CAAC;IACjB,OAAO,IAAI,CAAC,IAAI,CAAC,MAHnB;;EAIA,QAAW,IAAI,CAAC,IAAI,CAAC,KAAb,GAAwB,UAAU,CAAC,GAAG,CAAC,KAAf,CAAqB,IAAI,CAAC,IAAI,CAAC,KAA/B,CAAxB,GAAmE;EAC3E,WAAc,IAAI,CAAC,IAAI,CAAC,IAAb,GAAuB,IAAI,CAAC,IAAI,CAAC,IAAjC,GAA2C;SACtD,UAAU,CAAC,IAAX,CAAgB,IAAhB,EAAsB,IAAI,CAAC,IAA3B,EAAiC,KAAjC,IAA0C,CAAI,QAAH,GAAiB,MAAI,QAArB,GAAqC,EAAtC;AAVlC;;AAaV,SAAS,SAAC,IAAD,EAAO,IAAP;AACP;EAAA,eAAe,QAAQ,IAAR,EAAc,IAAd;SACf,MAAM,CAAC,WAAP,CAAmB,YAAY,CAAC,MAAb,CAAoB,CAApB,CAAnB;AAFO;;AAKT,QAAQ,SAAC,IAAD;SACN,UAAU,CAAC,QAAX,CAAoB,IAApB;AADM;;AAIR,aAAa,SAAC,GAAD;SACX,UAAU,CAAC,aAAX,CAAyB,GAAzB;AADW;;AAIb,mBAAmB;SACjB,UAAU,CAAC,YAAX;AADiB;;AAInB,qBAAqB,SAAC,UAAD;SACnB,UAAU,CAAC,OAAX,EAAoB,CAAC,KAAK,CAAC,OAAQ;AADhB;;AAIrB,aAAa,SAAC,GAAD;EACX,IAAoC,GAApC;AAAA,WAAO,UAAU,CAAC,SAAX,CAAqB,GAArB,EAAP;;AACA,SAAO,UAAU,CAAC,SAAX;AAFI;;AAIb,UACE;EAAA,WAAW,SAAX;EACA,SAAS,OADT;EAEA,QAAQ,MAFR;EAGA,OAAO,KAHP;EAIA,YAAY,UAJZ;EAKA,kBAAkB,gBALlB;EAMA,YAAY,UANZ;EAOA,oBAAoB,kBAPpB;;;AASF,IAAG,MAAM,CAAC,QAAV;AACE;;;IAAA,QAAQ,CAAC,cAAT,CAAwB,IAAxB,EAA8B,IAA9B;AAAA,GADF;;;AAGA,IAAG,MAAM,CAAC,QAAV;EACE,oBACE;IAAA,SAAS,OAAT;IACA,QAAQ,MADR;IAFJ","file":"/packages/arillo_flow-router-helpers.js","sourcesContent":["# check for subscriptions to be ready\nsubsReady = (subs...) ->\n  return FlowRouter.subsReady() if subs.length is 1\n  subs = subs.slice(0, subs.length - 1)\n  _.reduce subs, (memo, sub) ->\n    memo and FlowRouter.subsReady(sub)\n  , true\n\n# return path\npathFor = (path, view = {hash:{}}) ->\n  throw new Error('no path defined') unless path\n  # set if run on server\n  view = hash: view unless view.hash\n  if path.hash?.route?\n    view = path\n    path = view.hash.route\n    delete view.hash.route\n  query = if view.hash.query then FlowRouter._qs.parse(view.hash.query) else {}\n  hashBang = if view.hash.hash then view.hash.hash else ''\n  FlowRouter.path(path, view.hash, query) + (if hashBang then \"##{hashBang}\" else '')\n\n# return absolute url\nurlFor = (path, view) ->\n  relativePath = pathFor(path, view)\n  Meteor.absoluteUrl(relativePath.substr(1))\n\n# get parameter\nparam = (name) ->\n  FlowRouter.getParam(name);\n\n# get query parameter\nqueryParam = (key) ->\n  FlowRouter.getQueryParam(key);\n\n# get current route name\ncurrentRouteName = () ->\n  FlowRouter.getRouteName()\n\n# get current route options\ncurrentRouteOption = (optionName) ->\n  FlowRouter.current().route.options[optionName]\n\n# deprecated\nisSubReady = (sub) ->\n  return FlowRouter.subsReady(sub) if sub\n  return FlowRouter.subsReady()\n\nhelpers =\n  subsReady: subsReady\n  pathFor: pathFor\n  urlFor: urlFor\n  param: param\n  queryParam: queryParam\n  currentRouteName: currentRouteName\n  isSubReady: isSubReady\n  currentRouteOption: currentRouteOption\n\nif Meteor.isClient\n  Template.registerHelper name, func for own name, func of helpers\n  \nif Meteor.isServer\n  FlowRouterHelpers = \n    pathFor: pathFor\n    urlFor: urlFor\n"]}