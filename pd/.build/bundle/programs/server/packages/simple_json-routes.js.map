{"version":3,"sources":["meteor://ðŸ’»app/packages/simple_json-routes/packages/simple_json-routes.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/packages/simple_json-routes.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/simple:json-routes/json-routes.js                                    //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n/* global JsonRoutes:true */                                                     // 1\n                                                                                 // 2\nvar Fiber = Npm.require(\"fibers\");                                               // 3\nvar connect = Npm.require('connect');                                            // 4\nvar connectRoute = Npm.require('connect-route');                                 // 5\n                                                                                 // 6\nJsonRoutes = {};                                                                 // 7\n                                                                                 // 8\nWebApp.rawConnectHandlers.use(connect.urlencoded());                             // 9\nWebApp.rawConnectHandlers.use(connect.json());                                   // 10\nWebApp.rawConnectHandlers.use(connect.query());                                  // 11\n                                                                                 // 12\n// Handler for adding middleware before an endpoint (JsonRoutes.middleWare       // 13\n// is just for legacy reasons). Also serves as a namespace for middleware        // 14\n// packages to declare their middleware functions.                               // 15\nJsonRoutes.Middleware = JsonRoutes.middleWare = connect();                       // 16\nWebApp.rawConnectHandlers.use(JsonRoutes.Middleware);                            // 17\n                                                                                 // 18\n// List of all defined JSON API endpoints                                        // 19\nJsonRoutes.routes = [];                                                          // 20\n                                                                                 // 21\n// Save reference to router for later                                            // 22\nvar connectRouter;                                                               // 23\n                                                                                 // 24\n// Register as a middleware                                                      // 25\nWebApp.rawConnectHandlers.use(connectRoute(function (router) {                   // 26\n  connectRouter = router;                                                        // 27\n}));                                                                             // 28\n                                                                                 // 29\nJsonRoutes.add = function (method, path, handler) {                              // 30\n  // Make sure path starts with a slash                                          // 31\n  if (path[0] !== \"/\") {                                                         // 32\n    path = \"/\" + path;                                                           // 33\n  }                                                                              // 34\n                                                                                 // 35\n  // Add to list of known endpoints                                              // 36\n  JsonRoutes.routes.push({                                                       // 37\n    method: method,                                                              // 38\n    path: path                                                                   // 39\n  });                                                                            // 40\n                                                                                 // 41\n  connectRouter[method.toLowerCase()](path, function (req, res, next) {          // 42\n    Fiber(function () {                                                          // 43\n      try {                                                                      // 44\n        handler(req, res, next);                                                 // 45\n      } catch (err) {                                                            // 46\n        JsonRoutes.sendError(res, getStatusCodeFromError(err), err);             // 47\n      }                                                                          // 48\n    }).run();                                                                    // 49\n  });                                                                            // 50\n};                                                                               // 51\n                                                                                 // 52\nvar responseHeaders = {                                                          // 53\n  \"Cache-Control\": \"no-store\",                                                   // 54\n  \"Pragma\": \"no-cache\"                                                           // 55\n};                                                                               // 56\n                                                                                 // 57\nJsonRoutes.setResponseHeaders = function (headers) {                             // 58\n  responseHeaders = headers;                                                     // 59\n};                                                                               // 60\n                                                                                 // 61\n/**                                                                              // 62\n * Convert `Error` objects to plain response objects suitable                    // 63\n * for serialization.                                                            // 64\n *                                                                               // 65\n * @param {Any} [error] Should be a Meteor.Error or Error object. If anything    // 66\n *   else is passed or this argument isn't provided, a generic                   // 67\n *   \"internal-server-error\" object is returned                                  // 68\n */                                                                              // 69\nJsonRoutes._errorToJson = function (error) {                                     // 70\n  if (error instanceof Meteor.Error) {                                           // 71\n    return buildErrorResponse(error);                                            // 72\n  } else if (error && error.sanitizedError instanceof Meteor.Error) {            // 73\n    return buildErrorResponse(error.sanitizedError);                             // 74\n  } else {                                                                       // 75\n    return {                                                                     // 76\n      error: 'internal-server-error',                                            // 77\n      reason: 'Internal server error'                                            // 78\n    };                                                                           // 79\n  }                                                                              // 80\n};                                                                               // 81\n                                                                                 // 82\n/**                                                                              // 83\n * Sets the response headers, status code, and body, and ends it.                // 84\n * The JSON response will be pretty printed if NODE_ENV is `development`.        // 85\n *                                                                               // 86\n * @param {Object} res Response object                                           // 87\n * @param {Number} code HTTP status code.                                        // 88\n * @param {Object|Array|null|undefined} data The object to stringify as          // 89\n *   the response. If `null`, the response will be \"null\". If                    // 90\n *   `undefined`, there will be no response body.                                // 91\n */                                                                              // 92\nJsonRoutes.sendResult = function (res, code, data) {                             // 93\n  // Set headers on response                                                     // 94\n  setHeaders(res);                                                               // 95\n                                                                                 // 96\n  // Set status code on response                                                 // 97\n  res.statusCode = code || 200;                                                  // 98\n                                                                                 // 99\n  // Set response body                                                           // 100\n  writeJsonToBody(res, data);                                                    // 101\n                                                                                 // 102\n  // Send the response                                                           // 103\n  res.end();                                                                     // 104\n};                                                                               // 105\n                                                                                 // 106\n/**                                                                              // 107\n * Sets the response headers, status code, and body, and ends it.                // 108\n * The JSON response will be pretty printed if NODE_ENV is `development`.        // 109\n *                                                                               // 110\n * @param {Object} res Response object                                           // 111\n * @param {Number} code The status code to send. Default is 500.                 // 112\n * @param {Error|Meteor.Error} error The error object to stringify as            // 113\n *   the response. A JSON representation of the error details will be            // 114\n *   sent. You can set `error.data` or `error.sanitizedError.data` to            // 115\n *   some extra data to be serialized and sent with the response.                // 116\n */                                                                              // 117\nJsonRoutes.sendError = function (res, code, error) {                             // 118\n  // Set headers on response                                                     // 119\n  setHeaders(res);                                                               // 120\n                                                                                 // 121\n  // If no error passed in, use the default empty error                          // 122\n  error = error || new Error();                                                  // 123\n                                                                                 // 124\n  // Set status code on response                                                 // 125\n  res.statusCode = code || 500;                                                  // 126\n                                                                                 // 127\n  // Convert `Error` objects to JSON representations                             // 128\n  var json = JsonRoutes._errorToJson(error);                                     // 129\n                                                                                 // 130\n  // Set response body                                                           // 131\n  writeJsonToBody(res, json);                                                    // 132\n                                                                                 // 133\n  // Send the response                                                           // 134\n  res.end();                                                                     // 135\n};                                                                               // 136\n                                                                                 // 137\nfunction setHeaders(res) {                                                       // 138\n  _.each(responseHeaders, function (value, key) {                                // 139\n    res.setHeader(key, value);                                                   // 140\n  });                                                                            // 141\n}                                                                                // 142\n                                                                                 // 143\nfunction getStatusCodeFromError(error) {                                         // 144\n  // Bail out if no error passed in                                              // 145\n  if (! error) {                                                                 // 146\n    return 500;                                                                  // 147\n  }                                                                              // 148\n                                                                                 // 149\n  // If an error or sanitizedError has a `statusCode` property, we use that.     // 150\n  // This allows packages to check whether JsonRoutes package is used and if so, // 151\n  // to include a specific error status code with the errors they throw.         // 152\n  if (error.sanitizedError && error.sanitizedError.statusCode) {                 // 153\n    return error.sanitizedError.statusCode;                                      // 154\n  }                                                                              // 155\n                                                                                 // 156\n  if (error.statusCode) {                                                        // 157\n    return error.statusCode;                                                     // 158\n  }                                                                              // 159\n                                                                                 // 160\n  // At this point, we know the error doesn't have any attached error code       // 161\n  if (error instanceof Meteor.Error ||                                           // 162\n    (error.sanitizedError instanceof Meteor.Error)) {                            // 163\n      // If we at least put in some effort to throw a user-facing Meteor.Error,  // 164\n      // the default code should be less severe                                  // 165\n      return 400;                                                                // 166\n  }                                                                              // 167\n                                                                                 // 168\n  // Most pessimistic case: internal server error 500                            // 169\n  return 500;                                                                    // 170\n}                                                                                // 171\n                                                                                 // 172\nfunction buildErrorResponse(errObj) {                                            // 173\n  // If an error has a `data` property, we                                       // 174\n  // send that. This allows packages to include                                  // 175\n  // extra client-safe data with the errors they throw.                          // 176\n  var fields = ['error', 'reason', 'details', 'data'];                           // 177\n  return _.pick(errObj, fields);                                                 // 178\n}                                                                                // 179\n                                                                                 // 180\nfunction writeJsonToBody(res, json) {                                            // 181\n  if (json !== undefined) {                                                      // 182\n    var shouldPrettyPrint = (process.env.NODE_ENV === 'development');            // 183\n    var spacer = shouldPrettyPrint ? 2 : null;                                   // 184\n    res.setHeader(\"Content-type\", \"application/json\");                           // 185\n    res.write(JSON.stringify(json, null, spacer));                               // 186\n  }                                                                              // 187\n}                                                                                // 188\n                                                                                 // 189\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}